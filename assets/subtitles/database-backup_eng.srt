1
00:00:00,400 --> 00:00:02,940
The wisest senior developers are the first to

2
00:00:02,940 --> 00:00:06,960
admit that their codebase is a flaming pile

3
00:00:06,960 --> 00:00:11,320
of bug-ridden garbage that has somehow survived

4
00:00:11,320 --> 00:00:12,900
in production as long as it has.

5
00:00:13,020 --> 00:00:14,960
So, because you and your team are always

6
00:00:14,960 --> 00:00:17,780
just one bad commit away from wiping out

7
00:00:17,780 --> 00:00:19,860
all of your customers' data, don't you think

8
00:00:19,860 --> 00:00:21,360
it would be smart to backup your production

9
00:00:21,360 --> 00:00:21,840
databases?

10
00:00:22,100 --> 00:00:23,720
So, let's talk about how you would actually

11
00:00:23,720 --> 00:00:25,500
set up database backups.

12
00:00:25,840 --> 00:00:27,780
Or how they work, is probably a more

13
00:00:27,780 --> 00:00:28,680
accurate way to put it.

14
00:00:29,080 --> 00:00:32,440
So, here we've got our production database.

15
00:00:34,120 --> 00:00:34,300
Right?

16
00:00:34,380 --> 00:00:36,960
And every day, new data is being added

17
00:00:36,960 --> 00:00:38,320
to the production database.

18
00:00:38,580 --> 00:00:40,420
And so, naturally, we're concerned, right?

19
00:00:40,420 --> 00:00:42,320
We want to make sure that even if

20
00:00:42,320 --> 00:00:45,100
something catastrophic happens, if this database gets deleted,

21
00:00:45,240 --> 00:00:47,260
if some bad code gets pushed that wipes

22
00:00:47,260 --> 00:00:48,480
out all of the rows in the database,

23
00:00:48,720 --> 00:00:48,920
right?

24
00:00:48,920 --> 00:00:50,660
That we have a way to restore the

25
00:00:50,660 --> 00:00:50,940
database.

26
00:00:50,940 --> 00:00:54,520
So, one very common strategy is to just

27
00:00:54,520 --> 00:00:58,220
kind of snapshot the database, let's say daily.

28
00:00:59,060 --> 00:01:01,420
A lot of companies I've worked at kind

29
00:01:01,420 --> 00:01:02,860
of just do daily snapshots.

30
00:01:03,400 --> 00:01:07,200
So, for example, every day at midnight, an

31
00:01:07,200 --> 00:01:08,880
automated task runs, right?

32
00:01:08,920 --> 00:01:12,020
There's some code running on the server that

33
00:01:12,020 --> 00:01:13,780
copies all of the data out of the

34
00:01:13,780 --> 00:01:18,040
production database and into a snapshot for the

35
00:01:18,040 --> 00:01:18,240
day.

36
00:01:18,780 --> 00:01:24,260
So, we'd say, prod, database, copy, you know,

37
00:01:24,340 --> 00:01:25,760
May 1, 2023.

38
00:01:27,100 --> 00:01:28,140
Something like that.

39
00:01:29,140 --> 00:01:33,800
And that data is going to live in

40
00:01:33,800 --> 00:01:35,080
cold storage somewhere.

41
00:01:35,180 --> 00:01:36,160
It's going to be very cheap.

42
00:01:36,580 --> 00:01:38,640
We're going to shove it into a flat

43
00:01:38,640 --> 00:01:39,360
file system.

44
00:01:39,480 --> 00:01:40,900
We don't need to be able to access

45
00:01:40,900 --> 00:01:43,500
this data kind of live from our application,

46
00:01:43,940 --> 00:01:44,200
right?

47
00:01:44,340 --> 00:01:46,640
So, kind of technically speaking, this might live

48
00:01:46,640 --> 00:01:50,000
in something like an Amazon S3 bucket or

49
00:01:50,000 --> 00:01:53,920
a Google Cloud Storage bucket.

50
00:01:54,500 --> 00:01:55,700
It's a very cheap storage.

51
00:01:56,200 --> 00:01:59,680
The idea being, if something goes wrong, we

52
00:01:59,680 --> 00:02:02,860
can always kind of restore from this backup

53
00:02:02,860 --> 00:02:05,940
back into our prod database, right?

54
00:02:06,560 --> 00:02:07,520
It's not being used live.

55
00:02:07,520 --> 00:02:08,660
It's just a backup.

56
00:02:09,220 --> 00:02:11,060
And then, of course, the next day, we

57
00:02:11,060 --> 00:02:11,940
would take...

58
00:02:11,940 --> 00:02:13,100
Let me change colors back.

59
00:02:15,000 --> 00:02:16,940
The next day, we would take a new

60
00:02:16,940 --> 00:02:26,770
snapshot and name it prod database copy

61
00:02:26,770 --> 00:02:30,150
May 2, 2023, right?

62
00:02:30,250 --> 00:02:30,930
You get the idea.

63
00:02:31,050 --> 00:02:32,690
We're taking snapshots daily.

64
00:02:32,910 --> 00:02:35,710
And then usually what would happen is we'd

65
00:02:35,710 --> 00:02:37,890
only keep the snapshots for a certain amount

66
00:02:37,890 --> 00:02:38,670
of time, right?

67
00:02:38,690 --> 00:02:40,590
So, we might take a snapshot every day,

68
00:02:40,590 --> 00:02:42,530
but only keep them around for a month.

69
00:02:43,090 --> 00:02:44,610
So, once we have a month's worth of

70
00:02:44,610 --> 00:02:47,690
snapshots, we start deleting the old snapshots just

71
00:02:47,690 --> 00:02:49,390
so we don't need to store all of

72
00:02:49,390 --> 00:02:51,530
that data forever, because that could start to

73
00:02:51,530 --> 00:02:52,010
get expensive.

74
00:02:52,230 --> 00:02:53,650
Now, you may have already noticed there's a

75
00:02:53,650 --> 00:02:54,610
problem here, right?

76
00:02:54,630 --> 00:02:56,610
If we're just taking a snapshot every day,

77
00:02:57,050 --> 00:02:59,890
that means that we take our snapshot, more

78
00:02:59,890 --> 00:03:02,170
data is added to the database, and then

79
00:03:02,170 --> 00:03:03,370
something bad happens.

80
00:03:03,370 --> 00:03:06,710
If we restore from that last snapshot, we're

81
00:03:06,710 --> 00:03:08,770
actually going to lose whatever happened in the

82
00:03:08,770 --> 00:03:11,750
last five or six hours since that snapshot

83
00:03:11,750 --> 00:03:12,210
was taken.

84
00:03:12,530 --> 00:03:15,270
So, the simple way to solve this or

85
00:03:15,270 --> 00:03:17,590
to mitigate this would be to, instead of

86
00:03:17,590 --> 00:03:20,490
doing daily snapshots, you could do hourly snapshots,

87
00:03:20,670 --> 00:03:20,870
right?

88
00:03:21,070 --> 00:03:22,990
You still have the same problem, but now

89
00:03:22,990 --> 00:03:24,090
you have it at a smaller scale.

90
00:03:24,190 --> 00:03:27,010
You'll never lose more than, say, 59 minutes

91
00:03:27,010 --> 00:03:27,670
worth of data.

92
00:03:27,850 --> 00:03:29,710
Now, it's worth pointing out that for most

93
00:03:29,710 --> 00:03:34,250
small companies, this snapshot at a hourly or

94
00:03:34,250 --> 00:03:37,710
kind of daily rate is fine, right?

95
00:03:38,070 --> 00:03:40,670
You hopefully don't lose your production database anyways,

96
00:03:40,950 --> 00:03:42,350
but if you do, you're only going to

97
00:03:42,350 --> 00:03:43,690
lose a couple hours of data.

98
00:03:43,790 --> 00:03:45,390
It's probably not mission critical.

99
00:03:45,570 --> 00:03:48,050
Your business probably won't go out of business,

100
00:03:48,410 --> 00:03:48,670
right?

101
00:03:48,810 --> 00:03:51,170
And this is a very simple thing to

102
00:03:51,170 --> 00:03:51,830
set up, right?

103
00:03:51,870 --> 00:03:54,950
Most cloud providers of databases, things like Amazon

104
00:03:54,950 --> 00:03:58,210
RDS or Google Cloud SQL, have literally just

105
00:03:58,210 --> 00:04:00,030
a button you can click to set up

106
00:04:00,030 --> 00:04:01,230
automated snapshots.

107
00:04:01,370 --> 00:04:03,030
So, if you're working at a small company

108
00:04:03,030 --> 00:04:05,310
or on a small project, snapshots are probably

109
00:04:05,310 --> 00:04:05,890
the way to go.

110
00:04:05,990 --> 00:04:07,650
Let's talk about kind of a more robust

111
00:04:07,650 --> 00:04:08,090
option.

112
00:04:08,190 --> 00:04:10,350
Say you can't afford to lose any data.

113
00:04:10,910 --> 00:04:14,150
What you might do in that case is,

114
00:04:14,230 --> 00:04:16,410
I mean, you'd still have your prod.

115
00:04:16,610 --> 00:04:18,310
Let me make this a little bit bigger.

116
00:04:19,410 --> 00:04:21,610
You'd still have your prod database, but now

117
00:04:21,610 --> 00:04:24,830
instead of taking hourly or daily snapshots, what

118
00:04:24,830 --> 00:04:28,850
you might do is, anytime a change is

119
00:04:28,850 --> 00:04:32,050
enacted on the prod database, you might set

120
00:04:32,050 --> 00:04:34,490
up a system where that change is copied

121
00:04:34,490 --> 00:04:40,090
to some append-only log.

122
00:04:40,390 --> 00:04:44,010
Append-only log, right?

123
00:04:44,230 --> 00:04:47,850
So, for example, if you create a record

124
00:04:47,850 --> 00:04:52,090
here, you would also, in the append-only

125
00:04:52,090 --> 00:04:55,850
log, log the fact that you created the

126
00:04:55,850 --> 00:04:56,090
record.

127
00:04:57,950 --> 00:05:03,010
Similarly, if you then delete a record, keep

128
00:05:03,010 --> 00:05:04,570
in mind, when you delete a record in

129
00:05:04,570 --> 00:05:06,270
the prod database, it's just gone.

130
00:05:06,490 --> 00:05:07,390
Poof, right?

131
00:05:07,510 --> 00:05:09,610
But in the append-only log, you would

132
00:05:09,610 --> 00:05:11,790
just log that you deleted a record.

133
00:05:12,110 --> 00:05:15,750
So, log that record was deleted.

134
00:05:16,750 --> 00:05:19,690
The difference is, in the append-only log,

135
00:05:20,470 --> 00:05:26,510
right, we still have the log of the

136
00:05:26,510 --> 00:05:27,410
record being created.

137
00:05:27,550 --> 00:05:29,210
So, we could kind of go back and

138
00:05:29,210 --> 00:05:32,870
replay that record creation event if we need

139
00:05:32,870 --> 00:05:33,050
to.

140
00:05:33,410 --> 00:05:35,830
So, this kind of a system is, frankly,

141
00:05:36,030 --> 00:05:37,690
a bit more complex to set up, a

142
00:05:37,690 --> 00:05:40,730
bit more expensive to set up, but can

143
00:05:40,730 --> 00:05:43,150
give us a little more granularity and robustness

144
00:05:43,150 --> 00:05:45,430
in the sense that we won't ever lose

145
00:05:45,430 --> 00:05:47,170
any real-time data.

146
00:05:47,470 --> 00:05:49,050
And I quickly just want to reiterate the

147
00:05:49,050 --> 00:05:51,970
fact that for most companies, especially smaller companies,

148
00:05:52,310 --> 00:05:55,370
the snapshot update works just fine, and you'd

149
00:05:55,370 --> 00:05:57,690
only kind of venture into this more complex

150
00:05:57,690 --> 00:05:59,190
setup if you really needed to.
