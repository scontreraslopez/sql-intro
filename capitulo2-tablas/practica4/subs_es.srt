1
00:00:00,330 --> 00:00:02,330
Las buenas migraciones de bases de datos son un poco como las pruebas unitarias,

2
00:00:02,330 --> 00:00:04,290
en el sentido de que mucha gente no las hace muy bien, pero

3
00:00:04,290 --> 00:00:06,550
le gusta ir hablando de lo grandiosas que son.

4
00:00:06,550 --> 00:00:08,530
Yo soy un tester unitario agresivo.

5
00:00:08,910 --> 00:00:10,530
Si te estás preguntando de qué demonios estoy hablando,

6
00:00:10,650 --> 00:00:11,890
este vídeo es para ti.

7
00:00:13,350 --> 00:00:15,149
Hablemos sobre las migraciones de bases de datos.

8
00:00:15,670 --> 00:00:17,370
Vamos directamente a un ejemplo.

9
00:00:17,490 --> 00:00:20,850
Supongamos que tenemos una tabla de usuarios

10
00:00:20,850 --> 00:00:26,170
en nuestra base de datos, y la tabla de usuarios tiene

11
00:00:26,170 --> 00:00:26,870
algunos campos.

12
00:00:26,870 --> 00:00:32,050
Puede tener un ID, digamos que los usuarios tienen un

13
00:00:32,050 --> 00:00:34,850
nombre de usuario, tal vez una contraseña.

14
00:00:37,160 --> 00:00:40,400
De todos modos, supongamos que hemos desplegado esta aplicación

15
00:00:40,400 --> 00:00:41,160
en producción.

16
00:00:41,280 --> 00:00:42,660
Así que realmente tenemos usuarios.

17
00:00:42,820 --> 00:00:44,920
Esta tabla se está utilizando en producción por

18
00:00:44,920 --> 00:00:45,680
nuestra aplicación web.

19
00:00:46,120 --> 00:00:47,780
Pero lo que sucede es que ahora queremos

20
00:00:47,780 --> 00:00:49,960
agregar una nueva función, y la nueva función

21
00:00:49,960 --> 00:00:52,500
requiere un nuevo campo en la base de datos.

22
00:00:52,820 --> 00:00:55,640
Resulta que ahora necesitamos agregar un

23
00:00:55,640 --> 00:00:57,680
nuevo campo, llamémoslo cumpleaños.

24
00:00:58,960 --> 00:01:02,820
El acto de agregar ese campo, de añadir

25
00:01:02,820 --> 00:01:06,080
una nueva columna a la tabla, eso es

26
00:01:06,080 --> 00:01:07,100
una migración de base de datos.

27
00:01:07,540 --> 00:01:10,020
Ahora, este tipo de migración donde hemos agregado,

28
00:01:10,380 --> 00:01:12,780
una nueva columna o una nueva

29
00:01:12,780 --> 00:01:16,180
tabla, tiende a ser bastante segura.

30
00:01:17,180 --> 00:01:18,420
Tiende a ser bastante segura.

31
00:01:18,640 --> 00:01:21,160
Y la razón de eso es que la aplicación

32
00:01:21,160 --> 00:01:23,440
que ha estado conectada a esta base de datos y ejecutando

33
00:01:23,440 --> 00:01:26,280
consultas, no le importaba este campo de cumpleaños

34
00:01:26,280 --> 00:01:26,720
antes.

35
00:01:27,000 --> 00:01:29,780
Nunca estaba, digamos, consultando, dame

36
00:01:29,780 --> 00:01:31,680
todos los usuarios cuyos cumpleaños son

37
00:01:31,680 --> 00:01:32,500
antes de esta fecha.

38
00:01:32,620 --> 00:01:33,900
No estaba haciendo esas consultas.

39
00:01:34,160 --> 00:01:36,980
Al añadir un nuevo campo, es muy poco probable

40
00:01:36,980 --> 00:01:38,500
que rompamos algo, ¿verdad?

41
00:01:38,560 --> 00:01:40,860
Al añadir una nueva tabla a una base de datos

42
00:01:40,860 --> 00:01:43,720
que se está utilizando, es muy poco probable que rompas algo

43
00:01:43,720 --> 00:01:47,120
porque el código actual simplemente no se preocupa por

44
00:01:47,120 --> 00:01:49,500
esa tabla de base de datos porque simplemente no existía

45
00:01:49,500 --> 00:01:50,520
en la última versión.

46
00:01:50,520 --> 00:01:52,660
Por otro lado, digamos que hacemos

47
00:01:52,660 --> 00:01:56,760
una migración donde eliminamos las contraseñas de la

48
00:01:56,760 --> 00:01:57,900
tabla de usuarios, ¿verdad?

49
00:01:58,020 --> 00:02:00,460
Quizás ya no estamos almacenando las contraseñas de los usuarios porque

50
00:02:00,460 --> 00:02:02,780
solo apoyamos el inicio de sesión con Google, algo

51
00:02:02,780 --> 00:02:03,220
así.

52
00:02:03,580 --> 00:02:05,440
Estos tipos de migraciones, ¿verdad?

53
00:02:05,720 --> 00:02:09,340
Eliminaciones de datos, simplemente hago un RM.

54
00:02:09,919 --> 00:02:11,100
Son muy peligrosas.

55
00:02:11,900 --> 00:02:13,620
Tienden a ser muy peligrosas.

56
00:02:13,920 --> 00:02:15,940
Así que hablemos de algunas reglas generales

57
00:02:15,940 --> 00:02:19,080
sobre cómo abordar las migraciones dependiendo de si

58
00:02:19,080 --> 00:02:21,960
tu migración está añadiendo un recurso, como una

59
00:02:21,960 --> 00:02:24,520
columna o una tabla, eliminando una columna o

60
00:02:24,520 --> 00:02:27,380
una tabla, o actualizando, porque esto va

61
00:02:27,380 --> 00:02:28,360
a cambiar mucho, ¿verdad?

62
00:02:28,480 --> 00:02:29,540
Así que supongamos que estamos añadiendo.

63
00:02:29,780 --> 00:02:31,160
Estamos añadiendo una nueva columna o una nueva

64
00:02:31,160 --> 00:02:31,420
tabla.

65
00:02:31,820 --> 00:02:33,220
Esto tiende a ser seguro.

66
00:02:33,680 --> 00:02:35,200
Y lo que puedes hacer primero para

67
00:02:35,200 --> 00:02:38,240
mantener las cosas simples es primero ejecutar la

68
00:02:38,240 --> 00:02:39,240
migración en la base de datos.

69
00:02:39,360 --> 00:02:42,600
Así que actualizas la base de datos, paso número uno,

70
00:02:42,680 --> 00:02:43,180
¿verdad?

71
00:02:43,260 --> 00:02:46,700
Y al actualizar la base de datos, no has roto

72
00:02:46,700 --> 00:02:49,240
lo que actualmente está en funcionamiento porque solo estás añadiendo cosas nuevas, ¿verdad?

73
00:02:49,240 --> 00:02:49,920
De nuevo, en términos generales.

74
00:02:51,680 --> 00:02:55,640
Bien, número dos, actualizarás tu código, ¿verdad?

75
00:02:55,780 --> 00:02:57,520
Ahora puedes desplegar la nueva versión de

76
00:02:57,520 --> 00:03:00,600
la aplicación que realmente utiliza esos nuevos campos

77
00:03:00,600 --> 00:03:01,160
o tablas.

78
00:03:01,320 --> 00:03:03,500
Bien, ahora supongamos que estás eliminando una

79
00:03:03,500 --> 00:03:04,920
columna o una tabla.

80
00:03:05,140 --> 00:03:06,880
Lo primero que vas a hacer

81
00:03:06,880 --> 00:03:10,260
en este caso es actualizar el código, ¿verdad?

82
00:03:10,380 --> 00:03:12,840
Así que presumiblemente estás eliminando una columna o una

83
00:03:12,840 --> 00:03:14,800
tabla de una base de datos porque ya no

84
00:03:14,800 --> 00:03:17,180
la necesitas en tu lógica de aplicación, ¿verdad?

85
00:03:17,180 --> 00:03:19,280
Por cualquier razón, no te importan los

86
00:03:19,440 --> 00:03:20,060
cumpleaños de los usuarios.

87
00:03:20,060 --> 00:03:21,020
Así que simplemente vamos a proceder a

88
00:03:21,020 --> 00:03:21,420
eliminarlo.

89
00:03:21,540 --> 00:03:23,780
Primero necesitas actualizar el código.

90
00:03:24,580 --> 00:03:27,260
Deja de consultar ese recurso, ¿verdad?

91
00:03:27,340 --> 00:03:29,440
Deja de consultar esa columna o esa tabla.

92
00:03:30,200 --> 00:03:33,040
Una vez que el código ha sido actualizado, ahora puedes

93
00:03:33,040 --> 00:03:37,060
actualizar la base de datos de forma segura sin romper nada.

94
00:03:37,220 --> 00:03:38,820
Ahora hablemos de lo que es

95
00:03:38,820 --> 00:03:39,960
con mucho lo más difícil.

96
00:03:40,200 --> 00:03:41,300
Esto es actualizar.

97
00:03:42,320 --> 00:03:45,300
Ahora, en términos generales, deberías intentar solo hacer

98
00:03:45,300 --> 00:03:46,220
no actualizar.

99
00:03:46,220 --> 00:03:48,560
Y lo que quiero decir es que cambiar el nombre

100
00:03:48,560 --> 00:03:51,200
de una tabla es, en términos generales, una

101
00:03:51,200 --> 00:03:52,440
muy mala idea.

102
00:03:52,600 --> 00:03:54,960
Cambiar el nombre de una columna, muy mal.

103
00:03:55,160 --> 00:03:56,880
Intenta hacer esas cosas bien a la primera.

104
00:03:56,880 --> 00:03:57,180
Si

105
00:03:57,300 --> 00:03:59,580
tienes que cambiarlo,

106
00:03:59,840 --> 00:04:01,800
solo ten en cuenta que va a ser más

107
00:04:01,800 --> 00:04:03,520
trabajo y necesitas tener un cuidado extra.

108
00:04:03,760 --> 00:04:06,140
Porque ten en cuenta que, al añadir cosas,

109
00:04:06,540 --> 00:04:09,180
podemos actualizar la base de datos de forma segura previamente.

110
00:04:09,680 --> 00:04:12,780
Cuando estamos eliminando cosas, podemos actualizar de forma segura 

111
00:04:12,780 --> 00:04:14,700
la base de datos después del hecho.

112
00:04:14,700 --> 00:04:19,560
Cuando estamos actualizando cosas, realmente no hay una forma segura.

113
00:04:19,560 --> 00:04:19,980
Quiero decir, piénsalo solo un

114
00:04:20,180 --> 00:04:21,280
segundo.

115
00:04:21,780 --> 00:04:23,980
Tienes una versión antigua del código que

116
00:04:23,980 --> 00:04:26,400
espera un antiguo nombre de base de datos y una nueva

117
00:04:26,400 --> 00:04:28,820
versión del código que espera un nuevo nombre de base de datos.

118
00:04:28,820 --> 00:04:29,240
Realmente, tu única opción es asegurarte

119
00:04:29,640 --> 00:04:32,160
de que actualizas tanto el nombre de la tabla de la base de datos

120
00:04:32,160 --> 00:04:35,400
como el código al mismo tiempo exacto

121
00:04:35,400 --> 00:04:36,000
en el tiempo.

122
00:04:36,300 --> 00:04:37,660
Y es realmente difícil asegurarte de que

123
00:04:37,660 --> 00:04:37,960
eso suceda.

124
00:04:41,960 --> 00:04:44,940
Vas a tener probablemente milisegundos o segundos 

125
00:04:44,940 --> 00:04:45,700
de inactividad.

126
00:04:45,940 --> 00:04:47,740
Debido a que este es un problema más difícil, no hay

127
00:04:47,740 --> 00:04:50,040
una simple solución uno-dos.

128
00:04:50,520 --> 00:04:52,780
Simplemente voy a dar algunas ideas

129
00:04:52,780 --> 00:04:56,200
de cómo puedes abordar la actualización de una base de datos.

130
00:04:57,280 --> 00:04:59,400
La primera opción es programar inactividad.

131
00:05:01,200 --> 00:05:01,680
Inactividad.

132
00:05:01,760 --> 00:05:03,280
Esto significa que literalmente apagas

133
00:05:03,280 --> 00:05:03,900
tu aplicación.

134
00:05:04,060 --> 00:05:06,500
Dices, mira, clientes, lo siento, no pueden

135
00:05:06,500 --> 00:05:08,240
acceder a la aplicación durante los próximos 30 minutos.

136
00:05:08,400 --> 00:05:09,840
Estamos haciendo una gran actualización a nuestra base de datos.

137
00:05:10,560 --> 00:05:11,720
No lo recomiendo.

138
00:05:11,720 --> 00:05:12,580
Eso es un fastidio, ¿verdad?

139
00:05:12,640 --> 00:05:14,740
La gente quiere acceder a tu aplicación web.

140
00:05:15,160 --> 00:05:16,940
Así que esto es lo que harías

141
00:05:16,940 --> 00:05:18,680
si realmente sientes que no tienes

142
00:05:18,680 --> 00:05:19,480
más opciones.

143
00:05:19,620 --> 00:05:22,240
Es simple, pero afecta a tus clientes.

144
00:05:22,440 --> 00:05:24,980
La número dos es un poco lo que describí

145
00:05:24,980 --> 00:05:27,120
al principio, que es simplemente un despliegue

146
00:05:27,120 --> 00:05:31,880
en el mismo tiempo.

147
00:05:32,980 --> 00:05:34,900
Así que simplemente vamos a desplegar la

148
00:05:34,900 --> 00:05:36,500
actualización y vamos a desplegar el código

149
00:05:36,500 --> 00:05:37,300
al mismo tiempo.

150
00:05:37,300 --> 00:05:39,980
Entendemos que habrá una especie de

151
00:05:39,980 --> 00:05:42,200
error durante unos segundos.

152
00:05:42,540 --> 00:05:45,500
Pero si has determinado que, digamos, no tienes

153
00:05:45,500 --> 00:05:47,900
usuarios activos en ese momento o

154
00:05:47,900 --> 00:05:50,880
que unos pocos segundos de problemas no son realmente un

155
00:05:50,880 --> 00:05:52,800
problema y no vale la pena hacer nada más

156
00:05:52,800 --> 00:05:55,480
complejo, he visto empresas hacer esto.

157
00:05:55,580 --> 00:05:57,620
No diría que es una buena idea, pero

158
00:05:57,620 --> 00:05:59,040
hace el trabajo.

159
00:05:59,240 --> 00:06:01,740
El mejor enfoque o el enfoque más robusto

160
00:06:01,740 --> 00:06:03,500
probablemente sea copiar.

161
00:06:04,080 --> 00:06:09,120
Copiar la base de datos o la tabla de la base de datos,

162
00:06:09,380 --> 00:06:09,740
¿verdad?

163
00:06:09,820 --> 00:06:12,300
Así que creamos una nueva copia de la

164
00:06:12,300 --> 00:06:14,420
tabla con todos los datos exactos.

165
00:06:14,620 --> 00:06:18,100
Podemos actualizar el nombre de la nueva copia a

166
00:06:18,100 --> 00:06:19,800
ser la nueva tabla, ¿verdad?

167
00:06:19,820 --> 00:06:22,180
Y ahora podemos desplegar de forma segura el nuevo

168
00:06:22,180 --> 00:06:23,960
código que hace referencia a la nueva tabla.

169
00:06:24,180 --> 00:06:27,920
Hay posibilidad de que, ya sabes, en

170
00:06:27,920 --> 00:06:30,220
el interín de que has hecho la copia y

171
00:06:30,220 --> 00:06:32,240
ahora has desplegado el nuevo código que se añadirán

172
00:06:32,240 --> 00:06:33,900
nuevos registros en la tabla antigua

173
00:06:33,900 --> 00:06:35,500
que también necesitarías copiar.

174
00:06:35,780 --> 00:06:37,280
Pero eso también se puede manejar, ¿verdad?

175
00:06:37,340 --> 00:06:40,040
Puedes escribir un script de migración bastante robusto

176
00:06:40,040 --> 00:06:42,640
que copie datos a la nueva tabla, despliegue

177
00:06:42,640 --> 00:06:44,820
el código, y asegure que se mueven cualquier

178
00:06:44,820 --> 00:06:46,860
registros que se añadieron en el interín, ese

179
00:06:46,860 --> 00:06:47,280
tipo de cosas.

180
00:06:47,540 --> 00:06:49,600
Así que copiar tiende a ser muy robusto.

181
00:06:50,060 --> 00:06:51,900
Toma un poco más de trabajo, ¿verdad?

182
00:06:51,940 --> 00:06:56,960
Estás escribiendo scripts de migración más complejos para

183
00:06:56,960 --> 00:06:58,480
asegurarte de que todo se ejecute sin

184
00:06:58,480 --> 00:06:58,700
contratiempos.

185
00:06:58,700 --> 00:07:00,500
Ahora, sé que acabo de decir que copiar

186
00:07:00,500 --> 00:07:02,680
era el mejor enfoque y puede que me haya

187
00:07:02,680 --> 00:07:03,420
equivocado allí.

188
00:07:03,520 --> 00:07:05,740
De hecho, hay un enfoque mejor que conozco.

189
00:07:05,740 --> 00:07:06,340
Lo llamaré aliasing.

190
00:07:10,920 --> 00:07:14,100
La cuestión es que, a veces, el aliasing no es posible.

191
00:07:14,420 --> 00:07:17,600
Así que hay ciertas bases de datos que soportan una

192
00:07:17,600 --> 00:07:19,260
función de aliasing y algunas que no.

193
00:07:19,320 --> 00:07:20,320
Así que depende un poco de si esto

194
00:07:20,320 --> 00:07:21,040
está disponible para ti.

195
00:07:21,200 --> 00:07:23,500
Pero la idea detrás del aliasing es que

196
00:07:23,500 --> 00:07:25,440
puedes darle a la tabla un segundo nombre.

197
00:07:25,780 --> 00:07:29,020
Así que tu tabla de base de datos efectivamente tiene dos nombres

198
00:07:29,020 --> 00:07:30,080
por los que puede ser referenciada.

199
00:07:30,080 --> 00:07:31,920
Así que lo que eso significa es que tu código antiguo

200
00:07:31,920 --> 00:07:33,100
hace referencia al antiguo nombre.

201
00:07:33,300 --> 00:07:35,900
Haces un alias de la tabla con un segundo nombre.

202
00:07:36,060 --> 00:07:37,520
No se va a referenciar por dos nombres diferentes.

203
00:07:37,520 --> 00:07:37,800
El nuevo código usa el nuevo nombre, ¿verdad?

204
00:07:38,120 --> 00:07:40,780
Y luego, una vez que has desplegado de forma segura el nuevo

205
00:07:40,780 --> 00:07:43,480
código, puedes eliminar el antiguo nombre de

206
00:07:43,480 --> 00:07:43,880
la tabla.

207
00:07:45,960 --> 00:07:48,320
Ese sería de hecho el mejor, el más seguro,

208
00:07:48,540 --> 00:07:49,520
y el enfoque más simple.

209
00:07:49,620 --> 00:07:51,080
Pero depende un poco de tu tecnología

210
00:07:51,080 --> 00:07:52,460
de base de datos y de lo que está disponible para ti.

211
00:07:52,580 --> 00:07:53,580
Estas son solo cuatro opciones.

212
00:07:54,080 --> 00:07:55,700
Estas son las cuatro que he tendido a

213
00:07:55,700 --> 00:07:56,700
usar más.

214
00:07:56,800 --> 00:07:57,480
Espero que ayuden.

215
00:07:57,480 --> 00:07:59,480
Luego solo quiero reiterar que no

216
00:07:59,480 --> 00:08:02,520
deberías estar actualizando nombres muy a menudo, ¿verdad?

217
00:08:02,700 --> 00:08:04,080
Escoge buenos nombres para tus tablas.

218
00:08:04,440 --> 00:08:05,620
Escoge buenos nombres para tus columnas.

219
00:08:05,920 --> 00:08:08,080
Intenta hacer añadidos y eliminaciones y evita

220
00:08:08,080 --> 00:08:08,580
actualizaciones.

221
00:08:08,780 --> 00:08:10,000
Ahora, la última cosa de la que necesitamos hablar

222
00:08:10,000 --> 00:08:14,660
sobre las migraciones de bases de datos son las migraciones de tipo up, up y

223
00:08:14,660 --> 00:08:16,240
down.

224
00:08:17,340 --> 00:08:17,540
¿Verdad?

225
00:08:17,620 --> 00:08:19,140
Así que hemos hablado sobre los diferentes tipos de

226
00:08:19,140 --> 00:08:21,000
migraciones en el sentido de que puedes añadir

227
00:08:21,000 --> 00:08:23,040
algo, eliminarlo o actualizarlo.

228
00:08:23,040 --> 00:08:28,500
Pero, realísticamente, cualquier migración que nos avance en el tiempo

229
00:08:28,500 --> 00:08:31,440
la llamamos migración up, ¿verdad?

230
00:08:31,520 --> 00:08:36,799
Así que nuestra primera migración up podría crear una

231
00:08:36,799 --> 00:08:39,950
tabla, ¿verdad?

232
00:08:39,990 --> 00:08:45,430
Y luego nuestra segunda migración podría eliminar, debería decir, nuestra segunda migración up podría eliminar

233
00:08:45,430 --> 00:08:48,210
una columna de esa tabla, ¿verdad?

234
00:08:48,210 --> 00:08:51,130
Nuestra tercera migración up podría crear una nueva

235
00:08:51,130 --> 00:08:56,650
tabla, crear otra tabla.

236
00:08:58,410 --> 00:09:02,910
Ahora digamos que nuestra cuarta migración up renombra

237
00:09:02,910 --> 00:09:04,930
una columna.

238
00:09:06,310 --> 00:09:11,830
Y luego tal vez nuestra última migración elimina una

239
00:09:11,830 --> 00:09:13,850
tabla, ¿está bien?

240
00:09:13,990 --> 00:09:15,790
Esas son todas migraciones up.

241
00:09:16,350 --> 00:09:20,690
Y en teoría, la última versión en ejecución o la

242
00:09:20,690 --> 00:09:23,370
versión actual en ejecución de nuestra aplicación simplemente

243
00:09:23,370 --> 00:09:27,630
usará la última versión de las migraciones up.

244
00:09:27,750 --> 00:09:29,850
En otras palabras, habrá ejecutado cada

245
00:09:29,850 --> 00:09:33,570
una de las migraciones up en orden para llegar a

246
00:09:33,570 --> 00:09:35,350
una especie de estado final de la base de datos,

247
00:09:35,530 --> 00:09:37,150
el que está en producción.

248
00:09:37,350 --> 00:09:40,730
Ahora, una migración down, una migración down es

249
00:09:40,730 --> 00:09:44,810
realmente solo utilizada para revertir cambios en

250
00:09:44,810 --> 00:09:46,850
caso de emergencia o en caso el

251
00:09:46,850 --> 00:09:48,110
algo salga mal.

252
00:09:48,170 --> 00:09:50,330
Así que no planeas utilizar tus migraciones down.

253
00:09:50,330 --> 00:09:50,850
Solo las tienes como una

254
00:09:51,130 --> 00:09:53,470
copia de seguridad.

255
00:09:53,470 --> 00:09:55,890
Y, francamente, por eso al principio del vídeo hablaba de cómo

256
00:09:55,890 --> 00:09:57,190
la gente habla de grandes migraciones, pero a menudo no

257
00:09:57,190 --> 00:09:59,310
las implementan.

258
00:09:59,310 --> 00:09:59,890
No todas las empresas tienen grandes planes para las migraciones down.

259
00:10:00,690 --> 00:10:04,050
Hablando francamente, es más robusto tener grandes migraciones down

260
00:10:04,050 --> 00:10:04,610
para que puedas

261
00:10:05,110 --> 00:10:09,030
volver a subir tu base de datos y volver a bajar tu 

262
00:10:09,030 --> 00:10:10,850
base de datos, traerla hacia adelante y hacia atrás en el tiempo.

263
00:10:15,230 --> 00:10:16,630
Pero es mucho trabajo, ¿verdad?

264
00:10:16,690 --> 00:10:20,030
Así que no siempre verás equipos que tengan fantásticas migraciones down.

265
00:10:20,030 --> 00:10:21,750
Pero hablemos sobre cómo lucen

266
00:10:21,750 --> 00:10:23,310
un poco.

267
00:10:23,690 --> 00:10:26,050
Así que una migración down es muy simplemente

268
00:10:26,050 --> 00:10:29,450
lo opuesto de su variación relacionada up.

269
00:10:29,450 --> 00:10:29,790
Así que cuando añades una nueva tabla, podrías

270
00:10:29,950 --> 00:10:31,970
también registrar una migración down que elimine

271
00:10:31,970 --> 00:10:34,490
esa misma tabla.

272
00:10:34,490 --> 00:10:35,230
Así que eliminar tabla.

273
00:10:36,160 --> 00:10:37,790
Aquí tendríamos añadir columna, ¿verdad?

274
00:10:37,790 --> 00:10:41,570
Solo estamos haciendo lo inverso de la migración up equivalente.

275
00:10:41,590 --> 00:10:44,350
La tercera migración down eliminaría una tabla

276
00:10:44,350 --> 00:10:44,990
de nuevo.

277
00:10:45,490 --> 00:10:48,410
Eliminar tabla.

278
00:10:48,410 --> 00:10:48,850
La cuarta eliminaría el nombre de la columna, de vuelta a

279
00:10:48,850 --> 00:10:58,310
lo que era, ¿verdad?

280
00:10:58,330 --> 00:11:00,150
Invertiría esta migración up.

281
00:11:00,510 --> 00:11:03,210
Y al final aquí, tendríamos un

282
00:11:03,210 --> 00:11:04,150
comando añadir tabla.

283
00:11:06,520 --> 00:11:07,720
Y eso es un cinco.

284
00:11:07,880 --> 00:11:08,840
¿Por qué escribí seis?

285
00:11:09,960 --> 00:11:10,720
Ahí lo tienes.

286
00:11:11,440 --> 00:11:11,660
Está bien.

287
00:11:11,840 --> 00:11:14,020
Así que la teoría es que puedo ir hasta

288
00:11:14,020 --> 00:11:15,660
la última versión ejecutando

289
00:11:15,660 --> 00:11:17,400
estas migraciones up en orden.

290
00:11:17,800 --> 00:11:19,200
Y si necesito volver a una

291
00:11:19,200 --> 00:11:21,880
versión, solo puedo ejecutar la migración down

292
00:11:21,880 --> 00:11:22,580
equivalente, ¿verdad?

293
00:11:22,620 --> 00:11:24,540
Así que llego a la última y

294
00:11:24,540 --> 00:11:25,840
luego digo, oh, demonios, necesito

295
00:11:25,840 --> 00:11:28,240
retroceder a la última versión de mi

296
00:11:28,240 --> 00:11:28,640
base de datos.

297
00:11:28,920 --> 00:11:31,540
Puedo simplemente ejecutar esta migración down número

298
00:11:31,540 --> 00:11:33,980
cinco para reañadir esa tabla que

299
00:11:33,980 --> 00:11:34,520
acabo de eliminar.
